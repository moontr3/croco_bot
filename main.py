import time
from config import *
import api
from log import *
import utils

from typing import *
import discord
from discord.ext import commands

from dotenv import load_dotenv
import os
from typing import *


# loading token
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(
    command_prefix=PREFIX,
    help_command=None,
    intents=intents
)
mg = api.Manager(DATA_FILE, USERS_FILE)


# events

@bot.event
async def on_ready():
    log('Ready!', level=SUCCESS)

@bot.event
async def on_connect():
    log('Connected')

@bot.event
async def on_disconnect():
    log('Disconnected', level=WARNING)

@bot.event
async def on_resumed():
    log('Resumed', level=SUCCESS)


# callback

async def edit_finish_msg(message:discord.Message, r:api.Reaction):
    # creating new view
    view = discord.ui.View()

    btn = discord.ui.Button(
        style=discord.ButtonStyle.blurple,
        label='–•–æ—á—É –±—ã—Ç—å –≤–µ–¥—É—â–∏–º!',
        emoji='‚úã'
    )
    btn.callback = new_game

    like_btn = discord.ui.Button(
        style=discord.ButtonStyle.green,
        label=f'{len(r.likes)}', emoji='üëç'
    )
    like_btn.callback = like_callback

    dislike_btn = discord.ui.Button(
        style=discord.ButtonStyle.red,
        label=f'{len(r.dislikes)}', emoji='üëé'
    )
    dislike_btn.callback = dislike_callback

    view.add_item(btn)
    view.add_item(like_btn)
    view.add_item(dislike_btn)

    # editing embed
    embed = message.embeds[0]
    embed.clear_fields()

    if r.likes != []:
        embed.add_field(
            name=f'üëç {len(r.likes)}',
            value='\n'.join([f":white_small_square: <@{i}>" for i in r.likes]),
            inline=True
        )

    if r.dislikes != []:
        embed.add_field(
            name=f'üëé {len(r.dislikes)}',
            value='\n'.join([f":white_small_square: <@{i}>" for i in r.dislikes]),
            inline=True
        )

    await message.edit(embed=embed, view=view)


# on_message event

@bot.event
async def on_message(message:discord.Message):
    # no not bots that's not, no.
    if message.author.bot:
        return
    
    await bot.process_commands(message)

    # checking for ongoing game
    game = mg.get_game(message.channel.id)
    if game == None or message.author.id == game.starter_id:
        return
    
    # checking if guess is correct
    if game.word.lower() == message.content.lower().strip().replace('—ë','–µ'):
        game, guesser_events, explainer_events = mg.word_guessed(
            message.channel.id,
            message.guild.id,
            message.author.id
        )
        # creating view
        view = discord.ui.View()

        btn = discord.ui.Button(
            style=discord.ButtonStyle.blurple,
            label='–•–æ—á—É –±—ã—Ç—å –≤–µ–¥—É—â–∏–º!',
            emoji='‚úã'
        )
        btn.callback = new_game

        like_btn = discord.ui.Button(
            style=discord.ButtonStyle.green,
            label='0', emoji='üëç'
        )
        like_btn.callback = like_callback

        dislike_btn = discord.ui.Button(
            style=discord.ButtonStyle.red,
            label='0', emoji='üëé'
        )
        dislike_btn.callback = dislike_callback

        view.add_item(btn)
        view.add_item(like_btn)
        view.add_item(dislike_btn)

        # creating embed
        footer = f'+{len(game.word)} XP –¥–ª—è {message.author.name} –∏ {game.starter_name}'
        if game.moonrocks > 0:
            footer += f'\n{game.starter_name} –ø–æ–ª—É—á–∏–ª üíé{game.moonrocks}!'

        if guesser_events:
            footer += '\n'+utils.events_to_text(message.author.name, guesser_events)
        
        if explainer_events:
            footer += '\n'+utils.events_to_text(game.starter_name, explainer_events)

        embed = discord.Embed(
            description=f'‚úÖ <@{message.author.id}> –æ—Ç–≥–∞–¥–∞–ª(–∞) —Å–ª–æ–≤–æ **{game.word}**!',
            color=discord.Color.green()
        )
        embed.set_footer(text=footer)
        msg = await message.reply(embed=embed, view=view)

        # adding reference
        mg.add_reactions(msg.id, game.starter_id)



# reload data command

@bot.command()
async def reload(ctx:commands.Context):
    if ctx.author.id not in config.ADMINS:
        return
    
    log(f'{ctx.author.id} ran {PREFIX}reload')

    embed = discord.Embed(
        description='üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º...',
        color=discord.Color.yellow()
    )
    message = await ctx.reply(embed=embed)

    mg.load_data()
    mg.load_users()
    log(f'Reloaded!', level=SUCCESS)

    embed = discord.Embed(
        description=f'‚úÖ –£—Å–ø–µ—à–Ω–æ!',
        color=discord.Color.green()
    )
    await message.edit(embed=embed)



# sync tree command

@bot.command()
async def sync(ctx:commands.Context):
    if ctx.author.id not in config.ADMINS:
        return
    
    log(f'{ctx.author.id} ran {PREFIX}sync')

    embed = discord.Embed(
        description='üå≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...',
        color=discord.Color.yellow()
    )
    message = await ctx.reply(embed=embed)

    log(f'Syncing tree...')
    commands: list = await bot.tree.sync()
    log(f'Tree synced with {len(commands)} commands!', level=SUCCESS)

    embed = discord.Embed(
        description=f'‚úÖ –£—Å–ø–µ—à–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {len(commands)} –∫–æ–º–∞–Ω–¥!',
        color=discord.Color.green()
    )
    await message.edit(embed=embed)



# like callback

async def like_callback(inter: discord.Interaction):
    # liking
    state = mg.like(inter.message.id, inter.user.id)

    # game not found
    if state == None:
        return
    
    r = mg.reactions[inter.message.id]

    # error message
    if state != 0:
        text = [
            f'–í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ <@{r.explainer_id}>!',
            f'–í—ã —É–∂–µ –¥–∏–∑–ª–∞–π–∫–Ω—É–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ <@{r.explainer_id}>!',
            '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ª–∞–π–∫–Ω—É—Ç—å —Å–≤–æ–µ –∂–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ!',
        ][state-1]
        embed = discord.Embed(
            description=f'üö´ {text}',
            color=discord.Color.red()
        )
        await inter.response.send_message(embed=embed, ephemeral=True)
        return
    
    # sending the word
    embed = discord.Embed(
        description=f'üëç –í–∞–º **–ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å** –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ <@{r.explainer_id}>!',
        color=discord.Color.green()
    )
    await inter.response.send_message(embed=embed, ephemeral=True)

    # editing original message
    await edit_finish_msg(inter.message, r)



# dislike callback

async def dislike_callback(inter: discord.Interaction):
    # disliking
    state = mg.dislike(inter.message.id, inter.user.id)

    # game not found
    if state == None:
        return
    
    r = mg.reactions[inter.message.id]
    
    # error message
    if state != 0:
        text = [
            f'–í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ <@{r.explainer_id}>!',
            f'–í—ã —É–∂–µ –¥–∏–∑–ª–∞–π–∫–Ω—É–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ <@{r.explainer_id}>!',
            '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç—å —Å–≤–æ–µ –∂–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ!',
        ][state-1]
        embed = discord.Embed(
            description=f'üö´ {text}',
            color=discord.Color.red()
        )
        await inter.response.send_message(embed=embed, ephemeral=True)
        return
    
    # sending the word
    embed = discord.Embed(
        description=f'üëé –í–∞–º **–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å** –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ <@{r.explainer_id}>',
        color=discord.Color.green()
    )
    await inter.response.send_message(embed=embed, ephemeral=True)

    # editing original message
    await edit_finish_msg(inter.message, r)



# view word callback

async def view_word(inter: discord.Interaction):
    # checking for ongoing game
    game = mg.get_game(inter.channel_id)
    if game == None:
        embed = discord.Embed(
            description=f'üö´ –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!',
            color=discord.Color.red()
        )
        await inter.response.send_message(embed=embed, ephemeral=True)
        return
    
    # checking if some sneaky ass pressed the button
    if game.starter_id != inter.user.id:
        embed = discord.Embed(
            description=f'üö´ –ù–µ –¥–ª—è —Ç–µ–±—è –º–æ—è –∫–Ω–æ–ø–æ—á–∫–∞ —Ä–æ—Å–ª–∞',
            color=discord.Color.red()
        )
        await inter.response.send_message(embed=embed, ephemeral=True)
        return
    
    # sending the word
    embed = discord.Embed(
        description=f'üìú –í–∞—à–µ —Å–ª–æ–≤–æ - **{game.word}**',
        color=discord.Color.green()
    )
    await inter.response.send_message(embed=embed, ephemeral=True)



# skip word callback

async def skip_word(inter: discord.Interaction):
    # checking for ongoing game
    game = mg.get_game(inter.channel_id)
    if game == None:
        embed = discord.Embed(
            description=f'üö´ –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!',
            color=discord.Color.red()
        )
        await inter.response.send_message(embed=embed, ephemeral=True)
        return
    
    # checking if some sneaky ass pressed the button
    if game.starter_id != inter.user.id:
        embed = discord.Embed(
            description=f'üö´ –ù–µ –¥–ª—è —Ç–µ–±—è –º–æ—è –∫–Ω–æ–ø–æ—á–∫–∞ —Ä–æ—Å–ª–∞',
            color=discord.Color.red()
        )
        await inter.response.send_message(embed=embed, ephemeral=True)
        return
    
    # changing word
    word, events = mg.new_word(inter.user.id, inter.channel_id, inter.guild_id)
    log(f'{inter.user.id} changed word to {word}')
    
    # creating view
    view = discord.ui.View()

    skip_btn = discord.ui.Button(
        style=discord.ButtonStyle.gray,
        label='–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ',
        emoji='‚è©'
    )
    skip_btn.callback = skip_word
    view.add_item(skip_btn)

    # sending the new word
    embed = discord.Embed(
        description=f'üìú –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ - **{word}**',
        color=discord.Color.green()
    )
    if events != []:
        embed.set_footer(text=utils.events_to_text(inter.user.name, events))
    
    await inter.response.send_message(embed=embed, view=view, ephemeral=True)



# end turn word callback

async def end_turn(inter: discord.Interaction):
    # checking for ongoing game
    game = mg.get_game(inter.channel_id)
    if game == None:
        embed = discord.Embed(
            description=f'üö´ –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!',
            color=discord.Color.red()
        )
        await inter.response.send_message(embed=embed, ephemeral=True)
        return
    
    # checking if some sneaky ass pressed the button
    if game.starter_id != inter.user.id:
        embed = discord.Embed(
            description=f'üö´ –ù–µ –¥–ª—è —Ç–µ–±—è –º–æ—è –∫–Ω–æ–ø–æ—á–∫–∞ —Ä–æ—Å–ª–∞',
            color=discord.Color.red()
        )
        await inter.response.send_message(embed=embed, ephemeral=True)
        return
    
    # ending game
    mg.games.pop(game.channel_id)
    log(f'{inter.user.id} removed game in {game.channel_id}')
    
    # creating view
    view = discord.ui.View()

    new_game_btn = discord.ui.Button(
        style=discord.ButtonStyle.blurple,
        label='–ò–≥—Ä–∞—Ç—å –µ—â—ë',
        emoji='üéÆ'
    )
    new_game_btn.callback = new_game
    view.add_item(new_game_btn)

    # sending the message
    embed = discord.Embed(
        description=f'ü§ö <@{game.starter_id}> –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Å–≤–æ–π —Ö–æ–¥!',
        color=discord.Color.green()
    )
    
    await inter.response.send_message(embed=embed, view=view)




# new game callback

async def new_game(inter: discord.Interaction):
    # checking for restrictions
    restr = mg.get_restriction(inter.channel_id)
    if restr != None and restr.guesser_id != inter.user.id:
        embed = discord.Embed(
            description=f'üö´ –ò–≥—Ä–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö <t:{int(restr.until)}:R>',
            color=discord.Color.red()
        )
        await inter.response.send_message(embed=embed, ephemeral=True)
        return

    # checking for ongoing game
    game = mg.get_game(inter.channel_id)
    if game != None:
        embed = discord.Embed(
            description=f'üö´ –≠—Ç–æ—Ç —Ä–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è <t:{int(game.until)}:R>,'\
                f' –∞ –ø–æ–∫–∞ –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–æ–≤–æ <@{game.starter_id}>.',
            color=discord.Color.red()
        )
        await inter.response.send_message(embed=embed, ephemeral=True)
        return

    # creating game
    word, events = mg.new_game(
        inter.guild_id, inter.channel_id,
        inter.message.id, inter.user.id, inter.user.name
    )

    # responding
    embed = discord.Embed(
        description=f'üìú –í–∞—à–µ —Å–ª–æ–≤–æ - **{word}**',
        color=discord.Color.green()
    )
    await inter.response.send_message(embed=embed, ephemeral=True)

    # creating view
    view = discord.ui.View()

    view_btn = discord.ui.Button(
        style=discord.ButtonStyle.blurple,
        label='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–æ',
        emoji='üìú'
    )
    view_btn.callback = view_word
    view.add_item(view_btn)

    skip_btn = discord.ui.Button(
        style=discord.ButtonStyle.gray,
        label='–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ',
        emoji='‚è©'
    )
    skip_btn.callback = skip_word
    view.add_item(skip_btn)

    turn_btn = discord.ui.Button(
        style=discord.ButtonStyle.red,
        label='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥',
        emoji='‚ùå'
    )
    turn_btn.callback = end_turn
    view.add_item(turn_btn)

    # creating embed
    embed = discord.Embed(
        description=f'üí≠ <@{inter.user.id}> –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ!',
        color=discord.Color.green()
    )
    if events != []:
        embed.set_footer(text=utils.events_to_text(inter.user.name, events))

    await inter.channel.send(embed=embed, view=view)



# change word command

@bot.hybrid_command(
    name='change-word', description='–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–∞—à —Ö–æ–¥.',
    aliases=['changeword','change_word','change','cw']
)
async def changeword(ctx:commands.Context):
    log(f'{ctx.author.id} ran {PREFIX}change-word')

    # checking for ongoing game
    game = mg.get_game(ctx.channel.id)
    if game == None:
        embed = discord.Embed(
            description=f'üö´ –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!',
            color=discord.Color.red()
        )
        await ctx.reply(embed=embed)
        return
    
    # checking if some sneaky ass pressed the button
    if game.starter_id != ctx.author.id:
        embed = discord.Embed(
            description=f'üö´ –ù–µ –¥–ª—è —Ç–µ–±—è –º–æ—è –∫–æ–º–∞–Ω–¥–∞ —Ä–æ—Å–ª–∞',
            color=discord.Color.red()
        )
        await ctx.reply(embed=embed)
        return
    
    # changing word
    word, events = mg.new_word(ctx.author.id, ctx.channel.id, ctx.guild.id)
    log(f'{ctx.author.id} changed word to {word}')
    
    # creating view
    view = discord.ui.View()

    view_btn = discord.ui.Button(
        style=discord.ButtonStyle.blurple,
        label='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–æ',
        emoji='üìú'
    )
    view_btn.callback = view_word
    view.add_item(view_btn)

    skip_btn = discord.ui.Button(
        style=discord.ButtonStyle.gray,
        label='–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ',
        emoji='‚è©'
    )
    skip_btn.callback = skip_word
    view.add_item(skip_btn)

    # sending the new word
    embed = discord.Embed(
        description=f'üìú –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ',
        color=discord.Color.green()
    )
    if events != []:
        embed.set_footer(text=utils.events_to_text(ctx.author.name, events))
    await ctx.reply(embed=embed, view=view)



# skip turn command

@bot.hybrid_command(
    name='skip', description='–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–∞—à —Ö–æ–¥.',
    aliases=['stop']
)
async def skip(ctx:commands.Context):
    log(f'{ctx.author.id} ran {PREFIX}skip')

    # checking for ongoing game
    game = mg.get_game(ctx.channel.id)
    if game == None:
        embed = discord.Embed(
            description=f'üö´ –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ —Å–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!',
            color=discord.Color.red()
        )
        await ctx.reply(embed=embed)
        return
    
    # checking if some sneaky ass pressed the button
    if game.starter_id != ctx.author.id:
        embed = discord.Embed(
            description=f'üö´ –ù–µ –¥–ª—è —Ç–µ–±—è –º–æ—è –∫–æ–º–∞–Ω–¥–∞ —Ä–æ—Å–ª–∞',
            color=discord.Color.red()
        )
        await ctx.reply(embed=embed)
        return
    
    # ending game
    mg.games.pop(game.channel_id)
    log(f'{ctx.author.id} removed game in {game.channel_id}')
    
    # creating view
    view = discord.ui.View()

    new_game_btn = discord.ui.Button(
        style=discord.ButtonStyle.blurple,
        label='–ò–≥—Ä–∞—Ç—å –µ—â—ë',
        emoji='üéÆ'
    )
    new_game_btn.callback = new_game
    view.add_item(new_game_btn)

    # sending the message
    embed = discord.Embed(
        description=f'ü§ö <@{game.starter_id}> –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Å–≤–æ–π —Ö–æ–¥!',
        color=discord.Color.green()
    )
    await ctx.reply(embed=embed, view=view)



# play command

@bot.hybrid_command(
    name='start', description='–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É –≤ —á–∞—Ç–µ.',
    aliases=['play','begin']
)
async def start(ctx:commands.Context):
    log(f'{ctx.author.id} ran {PREFIX}start')

    # checking for restrictions
    restr = mg.get_restriction(ctx.channel.id)
    if restr != None and restr.guesser_id != ctx.author.id:
        embed = discord.Embed(
            description=f'üö´ –ò–≥—Ä–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –≤—Å–µ—Ö <t:{int(restr.until)}:R>',
            color=discord.Color.red()
        )
        await ctx.reply(embed=embed)
        return

    # checking for ongoing game
    game = mg.get_game(ctx.channel.id)
    if game != None:
        embed = discord.Embed(
            description=f'üö´ –≠—Ç–æ—Ç —Ä–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è <t:{int(game.until)}:R>,'\
                f' –∞ –ø–æ–∫–∞ –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–æ–≤–æ <@{game.starter_id}>.',
            color=discord.Color.red()
        )
        await ctx.reply(embed=embed)
        return
    
    # creating game
    word, events = mg.new_game(
        ctx.guild.id, ctx.channel.id,
        ctx.message.id, ctx.author.id, ctx.author.name
    )

    # creating view
    view = discord.ui.View()

    view_btn = discord.ui.Button(
        style=discord.ButtonStyle.blurple,
        label='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–æ',
        emoji='üìú'
    )
    view_btn.callback = view_word
    view.add_item(view_btn)

    skip_btn = discord.ui.Button(
        style=discord.ButtonStyle.gray,
        label='–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ',
        emoji='‚è©'
    )
    skip_btn.callback = skip_word
    view.add_item(skip_btn)

    turn_btn = discord.ui.Button(
        style=discord.ButtonStyle.red,
        label='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥',
        emoji='‚ùå'
    )
    turn_btn.callback = end_turn
    view.add_item(turn_btn)

    # creating embed
    embed = discord.Embed(
        description=f'üí≠ <@{ctx.author.id}> –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ!',
        color=discord.Color.green()
    )
    if events != []:
        embed.set_footer(text=utils.events_to_text(ctx.author.name, events))

    await ctx.reply(embed=embed, view=view)



# profile command

@bot.hybrid_command(
    name='profile',
    description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.',
    aliases=['acc','bal','balance','stat','stats','account']
)
@discord.app_commands.describe(user='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
async def profile(ctx:commands.Context, user:discord.User=None):
    log(f'{ctx.author.id} ran {PREFIX}profile')

    if user == None:
        user = ctx.author

    # checking if the user's a bot
    if user.bot:
        embed = discord.Embed(
            description=f'üö´ –ë–æ—Ç—ã –Ω–µ —É–º–µ—é—Ç –∏–≥—Ä–∞—Ç—å –≤ –ö—Ä–æ–∫–æ–¥–∏–ª–∞!',
            color=discord.Color.red()
        )
        await ctx.reply(embed=embed)
        return

    # checking if the profile exists
    if user.id not in mg.users:
        text = f'<@{user.id}> –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª(–∞)'\
            if ctx.author.id != user.id else '–í—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª–∏'
        embed = discord.Embed(
            description=f'üö´ {text} –≤ –ö—Ä–æ–∫–æ–¥–∏–ª–∞!',
            color=discord.Color.red()
        )
        await ctx.reply(embed=embed)
        return
    
    bot_user = mg.users[user.id]

    # creating embed
    embed = discord.Embed(
        description=f'–ü—Ä–æ—Ñ–∏–ª—å <@{user.id}>',
        color=discord.Color.green()
    )
    embed.add_field(
        name=f'üíé **{bot_user.moonrocks}** –ª—É–Ω–Ω—ã—Ö –∫–∞–º–Ω–µ–π',
        value=''
    )
    xp_left = bot_user.xp-bot_user.xp_explained-bot_user.xp_guessed
    embed.add_field(
        name=f'‚ú® –í—Å–µ–≥–æ –æ–ø—ã—Ç–∞: **{bot_user.xp} XP**',
        value=f':white_small_square: –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–≥–∞–¥—ã–≤–∞–Ω–∏–µ–º: **{bot_user.xp_guessed} XP**\n'\
            f':white_small_square: –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–≥–∞–¥—ã–≤–∞–Ω–∏–µ–º: **{bot_user.xp_explained} XP**\n'+\
            (f':white_small_square: –û—Å—Ç–∞–ª—å–Ω–æ–µ: **{xp_left} XP**\n' if xp_left != 0 else ''),
        inline=False  
    )
    embed.add_field(
        name=f'üìú –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤',
        value=f':white_small_square: –û—Ç–≥–∞–¥–∞–Ω–æ: **{bot_user.words_guessed}**\n'\
            f':white_small_square: –ó–∞–≥–∞–¥–∞–Ω–æ: **{bot_user.words_explained}**\n'\
            f':white_small_square: –ü—Ä–æ–ø—É—â–µ–Ω–æ/–≤—ã–±—Ä–∞–Ω–æ: **{bot_user.words_chosen}**',
        inline=False
    )
    embed.add_field(
        name=f'üìä –†–µ–π—Ç–∏–Ω–≥',
        value=f':white_small_square: –õ–∞–π–∫–æ–≤: **{bot_user.likes}**\n'\
            f':white_small_square: –î–∏–∑–ª–∞–π–∫–æ–≤: **{bot_user.dislikes}**',
        inline=False
    )
    embed.add_field(
        name=f'‚åö –ù–∞—á–∞–ª(–∞) –∏–≥—Ä–∞—Ç—å',
        value=f':white_small_square: <t:{int(bot_user.started_playing)}> (<t:{int(bot_user.started_playing)}:R>)'
    )

    await ctx.reply(embed=embed)



# leaderboard command

@bot.hybrid_command(
    name='leaders',
    description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.',
    aliases=['leaderboard','lb']
)
@discord.app_commands.describe(places='–ö–æ–ª-–≤–æ –º–µ—Å—Ç (10 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)')
async def leaders(ctx:commands.Context, places:int=10):
    log(f'{ctx.author.id} ran {PREFIX}leaders')

    # haven't played yet
    if ctx.guild.id not in mg.guilds\
        or len(mg.guilds[ctx.guild.id].leaderboard) == 0:
            embed = discord.Embed(
                description=f'üö´ –¢—É—Ç –ø–æ–∫–∞ –Ω–µ –∏–≥—Ä–∞–ª–∏ –≤ –ö—Ä–æ–∫–æ–¥–∏–ª–∞!',
                color=discord.Color.red()
            )
            await ctx.reply(embed=embed)
            return
    
    # checking amount
    if places < 1 or places > 20:
        embed = discord.Embed(
            description=f'üö´ –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç 1 –¥–æ 20 –º–µ—Å—Ç!',
            color=discord.Color.red()
        )
        await ctx.reply(embed=embed)
        return
    
    # getting leaders
    guild = mg.guilds[ctx.guild.id]
    leaders = guild.get_leaderboard(places)
    leader_text = ''

    place = 0
    old_amount = 0

    for id, amount in leaders.items():
        if old_amount != amount:
            place += 1
            old_amount = amount

        text = ['`ü•á`','`ü•à`','`ü•â`']\
            [place-1] if place <= 3 else f'`#{place}`'
        leader_text += f'{text} <@{id}>  -  **`{amount}`**\n'

    embed = discord.Embed(color=discord.Color.green())
    embed.add_field(
        name=f'–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ {ctx.guild.name} –ø–æ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è–º',
        value=leader_text
    )
    embed.set_footer(
        text=f'–í—Å–µ–≥–æ –ª—é–¥–µ–π: {len(guild.leaderboard)}\n'\
            f'–í—Å–µ–≥–æ —É–≥–∞–¥—ã–≤–∞–Ω–∏–π: {guild.total_words_guessed}')
    await ctx.reply(embed=embed)



# transfer command

@bot.hybrid_command(
    name='pay',
    description='–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ª—É–Ω–Ω—ã–µ –∫–∞–º–Ω–∏ –Ω–∞ —Å—á—ë—Ç –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.',
    aliases=['transfer']
)
@discord.app_commands.describe(user='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', amount='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
async def pay(ctx:commands.Context, user:discord.User, amount:str):
    log(f'{ctx.author.id} ran {PREFIX}pay')

    # checking if the user's a bot
    if user.bot:
        embed = discord.Embed(
            description=f'üö´ –ë–æ—Ç—ã –Ω–µ —É–º–µ—é—Ç –∏–≥—Ä–∞—Ç—å –≤ –ö—Ä–æ–∫–æ–¥–∏–ª–∞!',
            color=discord.Color.red()
        )
        await ctx.reply(embed=embed)
        return

    # checking if the user's himself
    if user.id == ctx.author.id:
        embed = discord.Embed(
            description=f'üö´ –ê —Ç—ã —á–µ–≥–æ –æ–∂–∏–¥–∞–ª?',
            color=discord.Color.red()
        )
        await ctx.reply(embed=embed)
        return
    
    # transferring
    state, amount = mg.transfer_moonrocks(ctx.author.id, user.id, amount)

    # error messages
    if state != 0:
        text = [
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ –Ω—É–ª—è!',
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª –≤ –ö—Ä–æ–∫–æ–¥–∏–ª–∞!',
            '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—É–Ω–Ω—ã—Ö –∫–∞–º–Ω–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!\n\n'\
                f'–í–∞—à –±–∞–ª–∞–Ω—Å: **{mg.users[ctx.author.id].moonrocks}üíé**'
        ][state-1]

        embed = discord.Embed(
            description=f'üö´ {text}',
            color=discord.Color.red()
        )
        await ctx.reply(embed=embed)
        return
    
    # success message
    embed = discord.Embed(
        description=f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ **{amount}** –ª—É–Ω–Ω—ã—Ö'\
            f' –∫–∞–º–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <@{user.id}>!',
        color=discord.Color.green()
    )

    await ctx.reply(embed=embed)



# running bot

bot.run(TOKEN)